# 环境准备：三台centos7系统服务器
ip分别为：
192.168.100.10、
192.168.100.11、
192.168.100.12

# 做好主机名映射
vim /etc/hosts
192.168.100.10 k8s-master01
192.168.100.11 k8s-master02
192.168.100.12 k8s-master03

# 免密登录
ssh-keygen
全部默认回车即可

# 分发公钥给其他节点
ssh-copy-id root@k8s-master02
ssh-copy-id root@k8s-master03

# k8s-master01节点下载证书生成工具:cfssl和cfssljson命令
wget "https://github.com/cloudflare/cfssl/releases/download/v1.6.4/cfssl_1.6.4_linux_amd64" -O /usr/local/bin/cfssl
wget "https://github.com/cloudflare/cfssl/releases/download/v1.6.4/cfssljson_1.6.4_linux_amd64" -O /usr/local/bin/cfssljson

# 添加执行权限
chmod +x /usr/local/bin/cfssl*

# 下载etcd-3.5.10
wget https://github.com/etcd-io/etcd/releases/download/v3.5.10/etcd-v3.5.10-linux-amd64.tar.gz

# 解压ETCD
tar xf etcd-3.5.10-linux-amd64.tar.gz

# 将命令etcd和etcdctl移动到/usr/local/bin/下
mv etcd-*/etcd /usr/local/bin/
mv etcd-*/etcdctl /usr/local/bin/

# 查看版本
[root@k8s-master01 ~]# etcdctl version
etcdctl version: 3.5.10
API version: 3.5

# 创建工作目录：
mkdir /data/etcd/
# 创建证书目录：
mkdir /etc/etcd/ssl

# 创建etcd数据库使用的证书配置文件：
vim ca-config.json
{
  "signing": {
    "default": {
      "expiry": "876000h"
    },
    "profiles": {
      "kubernetes": {
        "usages": [
            "signing",
            "key encipherment",
            "server auth",
            "client auth"
        ],
        "expiry": "876000h"
      }
    }
  }
}

#解释：
      # 这段配置文件是用于配置加密和认证签名的一些参数。
      # 
      # 在这里，有两个部分：`signing`和`profiles`。
      # 
      # `signing`包含了默认签名配置和配置文件。
      # 默认签名配置`default`指定了证书的过期时间为`876000h`。`876000h`表示证书有效期为100年。
      # 
      # `profiles`部分定义了不同的证书配置文件。
      # 在这里，只有一个配置模块`kubernetes`，为了简便，它具备伙伴证书的所需权限；它包含了以下`usages`和过期时间`expiry`：
      # 
      # 1. `signing`：用于对其他证书进行签名
      # 2. `key encipherment`：用于加密和解密传输数据
      # 3. `server auth`：服务器身份验证
      # 4. `client auth`：客户端身份验证
      # 
      # 对于`kubernetes`配置文件，证书的过期时间也是`876000h`，即100年。
      # 


# 创建etcd证书请求文件：
vim etcd-ca-csr.json
{
  "CN": "etcd",
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names": [
    {
      "C": "CN",
      "ST": "Beijing",
      "L": "Beijing",
      "O": "etcd",
      "OU": "Etcd Security"
    }
  ],
  "ca": {
    "expiry": "876000h"
  }
}
# 解释
      # 这是一个用于生成证书签名请求（Certificate Signing Request，CSR）的JSON配置文件。JSON配置文件指定了生成证书签名请求所需的数据。
      # 
      # - "CN": "etcd" 指定了希望生成的证书的CN字段（Common Name），即证书的主题，通常是该证书标识的实体的名称。
      # - "key": {} 指定了生成证书所使用的密钥的配置信息。"algo": "rsa" 指定了密钥的算法为RSA，"size": 2048 指定了密钥的长度为2048位。
      # - "names": [] 包含了生成证书时所需的实体信息。在这个例子中，只包含了一个实体，其相关信息如下：
      #   - "C": "CN" 指定了实体的国家/地区代码，这里是中国。
      #   - "ST": "Beijing" 指定了实体所在的省/州。
      #   - "L": "Beijing" 指定了实体所在的城市。
      #   - "O": "etcd" 指定了实体的组织名称。
      #   - "OU": "Etcd Security" 指定了实体所属的组织单位。
      # - "ca": {} 指定了生成证书时所需的CA（Certificate Authority）配置信息。
      #   - "expiry": "876000h" 指定了证书的有效期，这里是876000小时。
      # 
      # 生成证书签名请求时，可以使用这个JSON配置文件作为输入，根据配置文件中的信息生成相应的CSR文件。然后，可以将CSR文件发送给CA进行签名，以获得有效的证书。



# 生成etcd的ca证书：
cfssl gencert -initca etcd-ca-csr.json | cfssljson -bare etcd-ca
# 解释
      # gencert参数表示生成证书的操作。-initca参数表示初始化一个CA（证书颁发机构）。CA是用于签发其他证书的根证书。
      # etcd-ca-csr.json是一个JSON格式的配置文件，其中包含了CA的详细信息，如私钥、公钥、有效期等。这个文件提供了生成CA证书所需的信息。
      # cfssljson是cfssl工具的一个子命令，用于格式化cfssl生成的JSON数据。 -bare参数表示直接输出裸证书，即只生成证书文件，不包含其他格式的文件

# 创建etcd的证书请求文件：
vim etcd-csr.json
{
  "CN": "etcd",
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "hosts": [
    "192.168.100.10",
    "192.168.100.11",
    "192.168.100.12",
    "192.168.100.13",
    "192.168.100.14",
    "127.0.0.1",
    "k8s-master01",
    "k8s-master02",
    "k8s-master03"
  ],
  "names": [
    {
      "C": "CN",
      "ST": "Beijing",
      "L": "Beijing",
      "O": "etcd",
      "OU": "Etcd Security"
    }
  ]
}
# 解释
      # 这段代码是一个JSON格式的配置文件，用于生成一个证书签名请求（Certificate Signing Request，CSR）。
      # 
      # 首先，"CN"字段指定了该证书的通用名称（Common Name），这里设为"etcd"。
      # 
      # 接下来，"key"字段指定了密钥的算法（"algo"字段）和长度（"size"字段），此处使用的是RSA算法，密钥长度为2048位。
      # hosts字段则代表了该证书可用于的IP地址，注意此处不能写网段，只能写具体的IP，因此建议多写几个，预留出“未来可能新增的ETCD节点IP”

      # 最后，"names"字段是一个数组，其中包含了一个名字对象，用于指定证书中的一些其他信息。这个名字对象包含了以下字段：
      # - "C"字段指定了国家代码（Country），这里设置为"CN"。
      # - "ST"字段指定了省份（State）或地区，这里设置为"Beijing"。
      # - "L"字段指定了城市（Locality），这里设置为"Beijing"。
      # - "O"字段指定了组织（Organization），这里设置为"etcd"。
      # - "OU"字段指定了组织单元（Organizational Unit），这里设置为"Etcd Security"。
      # 
      # 这些字段将作为证书的一部分，用于标识和验证证书的使用范围和颁发者等信息。

# 生成etcd证书：
cfssl gencert -ca=etcd-ca.pem -ca-key=etcd-ca-key.pem -config=ca-config.json -profile=kubernetes etcd-csr.json | cfssljson -bare etcd

# 分发证书：
scp etcd*pem k8s-master03:/etc/etcd/ssl/
scp etcd*pem k8s-master02:/etc/etcd/ssl/

# 创建etcd配置文件：
vim /etc/etcd/etcd.config.yml
name: 'k8s-master01'
data-dir: /data/etcd
wal-dir: /data/etcd/wal
snapshot-count: 5000
heartbeat-interval: 100
election-timeout: 1000
quota-backend-bytes: 0
listen-peer-urls: 'https://192.168.100.10:2380'
listen-client-urls: 'https://192.168.100.10:2379,http://127.0.0.1:2379'
max-snapshots: 5
max-wals: 5
cors:
initial-advertise-peer-urls: 'https://192.168.100.10:2380'
advertise-client-urls: 'https://192.168.100.10:2379'
discovery:
discovery-fallback: 'proxy'
discovery-proxy:
discovery-srv:
initial-cluster: 'k8s-master01=https://192.168.100.10:2380,k8s-master02=https://192.168.100.11:2380,k8s-master03=https://192.168.100.12:2380'
initial-cluster-token: 'etcd-k8s-cluster'
initial-cluster-state: 'new'
strict-reconfig-check: false
enable-v2: true
enable-pprof: true
proxy: 'off'
proxy-failure-wait: 5000
proxy-refresh-interval: 30000
proxy-dial-timeout: 1000
proxy-write-timeout: 5000
proxy-read-timeout: 0
client-transport-security:
  cert-file: '/etc/etcd/ssl/etcd.pem'
  key-file: '/etc/etcd/ssl/etcd-key.pem'
  client-cert-auth: true
  trusted-ca-file: '/etc/etcd/ssl/etcd-ca.pem'
  auto-tls: true
peer-transport-security:
  cert-file: '/etc/etcd/ssl/etcd.pem'
  key-file: '/etc/etcd/ssl/etcd-key.pem'
  peer-client-cert-auth: true
  trusted-ca-file: '/etc/etcd/ssl/etcd-ca.pem'
  auto-tls: true
debug: false
log-package-levels:
log-outputs: [default]
force-new-cluster: false


# 解释
      - `name`：指定了当前节点的名称，用于集群中区分不同的节点。
      - `data-dir`：指定了 etcd 数据的存储目录。
      - `wal-dir`：指定了 etcd 数据写入磁盘的目录。
      - `snapshot-count`：指定了触发快照的事务数量。
      - `heartbeat-interval`：指定了 etcd 集群中节点之间的心跳间隔。
      - `election-timeout`：指定了选举超时时间。
      - `quota-backend-bytes`：指定了存储的限额，0 表示无限制。默认是2G，当存储限额到达2G时，ETCD只可读删，不能写入；一般来说最大为8G；不过，当服务器的内存较高时，例如64G，也可以设置的超过8G
      - `listen-peer-urls`：指定了节点之间通信的 URL，使用 HTTPS 协议。伙伴之间互相访问使用的地址。
      - `listen-client-urls`：指定了客户端访问 etcd 集群的 URL，同时提供了本地访问的 URL。非集群节点访问ETCD使用的地址，例如kube-apiserver。
      - `max-snapshots`：指定了快照保留的数量。
      - `max-wals`：指定了日志保留的数量。
      - `initial-advertise-peer-urls`：指定了节点之间通信的初始 URL。
      - `advertise-client-urls`：指定了客户端访问 etcd 集群的初始 URL。
      - `discovery`：定义了 etcd 集群发现相关的选项。
      - `initial-cluster`：指定了 etcd 集群的初始成员。
      - `initial-cluster-token`：指定了集群的 token。
      - `initial-cluster-state`：指定了集群的初始状态。
      - `strict-reconfig-check`：指定了严格的重新配置检查选项。
      - `enable-v2`：启用了 v2 API。
      - `enable-pprof`：启用了性能分析。
      - `proxy`：设置了代理模式。
      - `client-transport-security`：客户端的传输安全配置。因为在ca-config.json文件中仅设置了‘kubernetes’这一个配置，且包含了server、client，因此可以通用
      - `peer-transport-security`：节点之间的传输安全配置。因为在ca-config.json文件中仅设置了‘kubernetes’这一个配置，且包含了server、client，因此可以通用
      - `debug`：是否启用调试模式。
      - `log-package-levels`：日志的输出级别。
      - `log-outputs`：指定了日志的输出类型。
      - `force-new-cluster`：是否强制创建一个新的集群。


# 分发给集群其他节点：
scp etcd.config.yml k8s-master03:/etc/etcd/
scp etcd.config.yml k8s-master02:/etc/etcd/

# 修改其他两个节点配置文件
主要修改name、以及地址参数
此处忽略

# 创建system管理的启动文件service
vim /usr/lib/systemd/system/etcd.service
[Unit]
Description=Etcd Service
Documentation=https://coreos.com/etcd/docs/latest/
After=network.target

[Service]
Type=notify
ExecStart=/usr/local/bin/etcd --config-file=/etc/etcd/etcd.config.yml
Restart=on-failure
RestartSec=10
LimitNOFILE=65536

[Install]
WantedBy=multi-user.target
Alias=etcd3.service

# 解释
      # 这是一个系统服务配置文件，用于启动和管理Etcd服务。
      # 
      # [Unit] 部分包含了服务的一些基本信息，它定义了服务的描述和文档链接，并指定了服务应在网络连接之后启动。
      # 
      # [Service] 部分定义了服务的具体配置。在这里，服务的类型被设置为notify，意味着当服务成功启动时，它将通知系统。
      ExecStart 指定了启动服务时要执行的命令，这里是运行 /usr/local/bin/etcd 命令并传递一个配置文件 /etc/etcd/etcd.config.yml。Restart 设置为 on-failure
      这意味着当服务失败时将自动重启，并且在10秒后进行重启。LimitNOFILE 指定了服务的最大文件打开数。
      # 
      # [Install] 部分定义了服务的安装配置。WantedBy 指定了服务应该被启动的目标，这里是 multi-user.target，表示在系统进入多用户模式时启动。Alias 定义了一个别名，可以通过etcd3.service来引用这个服务。
      # 
      # 这个配置文件描述了如何启动和管理Etcd服务，并将其安装到系统中。通过这个配置文件，可以确保Etcd服务在系统启动后自动启动，并在出现问题时进行重启。


# 重新加载：用于重新加载systemd管理的单位文件。当你新增或修改了某个单位文件（如.service文件、.socket文件等），需要运行该命令来刷新systemd对该文件的配置
systemctl daemon-reload

# 设置开机自启并立即启动：
systemctl enable --now etcd.service

# 查看服务状态：
systemctl status etcd.service

# 查看集群状态：此命令需要指定成员地址和证书路径
etcdctl --endpoints="192.168.100.10:2379,192.168.100.11:2379,192.168.100.12:2379" --cacert=/etc/etcd/ssl/etcd-ca.pem --cert=/etc/etcd/ssl/etcd.pem --key=/etc/etcd/ssl/etcd-key.pem endpoint status --write-out=table

# 解释
      # - `--endpoints`：指定要连接的etcd集群节点的地址和端口。在这个例子中，指定了3个节点的地址和端口，分别是`192.168.1.33:2379,192.168.1.32:2379,192.168.1.31:2379`。
      # - `--cacert`：指定用于验证etcd服务器证书的CA证书的路径。在这个例子中，指定了CA证书的路径为`/etc/kubernetes/pki/etcd/etcd-ca.pem`。CA证书用于验证etcd服务器证书的有效性。
      # - `--cert`：指定用于与etcd服务器进行通信的客户端证书的路径。在这个例子中，指定了客户端证书的路径为`/etc/kubernetes/pki/etcd/etcd.pem`。客户端证书用于在与etcd服务器建立安全通信时进行身份验证。
      # - `--key`：指定与客户端证书配对的私钥的路径。在这个例子中，指定了私钥的路径为`/etc/kubernetes/pki/etcd/etcd-key.pem`。私钥用于对通信进行加密解密和签名验证。
      # - `endpoint status`：子命令，用于检查etcd集群节点的健康状态。
      # - `--write-out`：指定输出的格式。在这个例子中，指定以表格形式输出。
      # 
      # 通过执行这个命令，可以获取到etcd集群节点的健康状态，并以表格形式展示。


# 列出集群节点：下面三个命令不需要强制指定成员地址和证书路径
etcdctl member list --write-out=table
# 检查集群健康：
etcdctl endpoint health --write-out=table
# 检查集群性能：
etcdctl check perf

# 数据操作和查询
# 插入/更改：etcdctl put <key> <value>    etcdctl put eve molok
# 查询：etcdctl get eve
# 删除：etcdctl del eve
# 监控：etcdctl watch eve

# 备份
# 创建备份快照目录：
mkdir /data/snapshot

# 创建备份到本机：
etcdctl snapshot save /data/snapshot/6_26.db

# 指定节点备份到本机命令：
etcdctl --endpoints="https://192.168.100.12:2379" --cacert=/etc/etcd/ssl/etcd-ca.pem --cert=/etc/etcd/ssl/etcd.pem --key=/etc/etcd/ssl/etcd-key.pem snapshot save /data/snapshot/6_26ggz.db
# 注：ETCD集群数据都是一样的，任何一台节点上执行都是可以的



# 集群恢复：Etcd集群恢复并不是简单快照覆盖，需要重新指定工作目录，原先的工作目录需要腾空
# 
# 创建备份存放目录：
mkdir /data/etcd-backup

# 首先停止kube-apiserver（没有略过）

# 停止所有etcd节点：
systemctl stop etcd

# 备份工作（数据）目录：
tar -czf etcd.tar.gz /data/etcd

# 移动到备份目录：
mv etcd.tar.gz /data/etcd-backup/

# 所有节点恢复快照：在所有节点都执行此命令
etcdctl snapshot restore /k8ssrc/snapshot/6_26ggz.db --data-dir=/k8ssrc/etcd

# 成功后，此时如果查看etcd目录会发现里面多了一个member目录，并且有数据

# 启动集群：
systemctl start etcd

# 检查：etcdctl get <key> <value>


